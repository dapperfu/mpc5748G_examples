/*!
    @page fccu_fault_injection_mpc5748g_group FCCU Fault Injection MPC5748G
    @brief Example application showing the usage of the FCCU Driver module for S32 SDK

    ## Application description ##
    _____
    The purpose of this demo is to provide the user with an out-of-the box
    example application for MPC57xx platform, using S32 SDK FCCU Driver
    The demo uses PinSettings Driver to toogle LEDs, control switches and configure LINFlexD2 , Clock Manager driver initilize system clock,
    LINFlexD driver for UART communication

    FCCU Driver demo will configure some faults sources as:
    - a fault that is triggered by pressing SW2 and will generate an alarm callback that turns off the LED;
    - a fault that is treat by HW and generate a fault and will be registered by freez status, EOUT signal;
    - a fault that is configured to generate a reset and triggered by pressing SW1 button, LED will be on after reset;
    All fault sources will be triggered by injection of fake faults

    Console Output:
    FCCU Example !

    Press SW2 - DEVKIT or SW6 - Motherboard !
    IRQ Status = FCCU_ISR_IRQ_ALARM
    Val Freeze Normal to Alarm = 31
    IRQ Status = ISR_NO
    Val Freeze Normal to Fault = 25

    Press SW4 - DEVKIT or SW3 - Motherboard will trigger fault Reset!

    FCCU Example !

    Press SW2 - DEVKIT or SW6 - Motherboard !

    ## Prerequisites ##
    ______
    The run the example you will need to have the following items:
    - 1 MPC5748G board
    - 1 Power Adapter 12V (if the board cannot be powered from the USB port)
    - 1 Personal Computer
    - 1 PEMicro Debugger (optional, users can use Open SDA)
    - 1 USB TypeB Cable to connect to Mother Board USB-RS232 (Optional)

    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - MPC574xG-MB
    - DEVKIT - MPC5748G

    ## Hardware Wiring ##
    ______
    No pin connections are needed for this application; it uses LINFlexD instance 2, which is internally connected to the serial-to-USB module on the board.
    For validation board, the USB type-B cable must be connected to P17 port, while for EVB the uUSB cable will be connected to J1 OpenSDA connector.
    A terminal interface (termite/putty etc) needs to be opened on the host computer and connected to the USB port communicating with the board.

    The following connections must be done to for this example application to work:

    PIN FUNCTION |   DEVKIT-MPC5748G                    |   MPC574xG-MB
    -------------|--------------------------------------|-------------------------------------
         LED     | LED (DS9) - wired on the board       | LED (DS2) - wired on the board
         SW1     | SW1 (SW4) - wired on the board       | SW1 (SW3) - wired on the board
         SW2     | SW2 (SW2) - wired on the board       | SW2 (SW6) - wired on the board
         PC8     | OpenSDA - LINFlexD2 RX               | USB-RS232 - LINFlexD2 RX (J16 connected)
         PC9     | OpenSDA - LINFlexD2 TX               | USB-RS232 - LINFlexD2 TX (J16 connected)

    ## Note ##
    On MPC574xG-MB Rev D, SW6 is as SW7 button but on the console will be display message to press SW6, on MPC574xG-MB Rev X1 SW6 button remains SW6.

    ## How to run ##
    ______

    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b fccu_fault_injection_mpc5748g. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b fccu_fault_injection_mpc5748g). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be four debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b fccu_fault_injection_mpc5748g_debug_ram___pemicro | Debug the RAM configuration using PEMicro debuggers
     \b fccu_fault_injection_mpc5748g_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.
*/
