/*!
    @page sema42_multicore_mpc5748g_group SEMA42 multicore MPC5748G
    @brief Example application showing the usage of the SEMA42 module

    ## Application description ##
    ______
    The purpose of this demo application is to show you
    Semaphore module of MPC57xx MCU for guarding access
    to sections of code in a multicore application.

    The examples does the following operations.
    - Firstly, all cores are started
    - The LEDs are configured as output by the first core (Z4_0).
    - Each of the other cores (Z4_1 and Z2) core tries to lock the same gate that maps on the same shared resource (one of the LEDs).
    - When one succeeds to lock the gate one LED (for Z4_1) or two LEDs (for Z2) blink to show which CPU acquired the gate.
    - After the gate is locked by a CPU the common resource is being blinked for five times and then the same core blinks the the same LEDs as when it acquired the gate
    - The operation repeats forever on both cores

    ## Prerequisites ##
    ______
    To run the example you will need to have the following items:
    - 1 MPC5748G board
    - 1 Power Adapter 12V (if the board cannot be powered from the USB port)
    - 1 Personal Computer
    - 1 PEMicro Debugger (optional, users can use Open SDA)

    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - DEVKIT - MPC5748G

    ## Hardware Wiring ##
    ______
    No connections are required for this example.

    ## How to run ##
    ______

    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select all three projects \b sema42_multicore_<coreId>_mpc5748g. Then click on \b Finish. \n
    The projects should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select one by one each of the projects(\b sema42_multicore_<coreId>_mpc5748g). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select each project and then the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be four debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b sema42_multicore_mpc5748g_z4_0_debug_ram_pemicro | Debug the RAM configuration using PEMicro debuggers
     \b sema42_multicore_mpc5748g_z4_0_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers
     \b sema42_multicore_mpc5748g_z4_1_debug_ram_pemicro | Debug the RAM configuration using PEMicro debuggers
     \b sema42_multicore_mpc5748g_z4_1_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers
     \b sema42_multicore_mpc5748g_z2_debug_ram_pemicro | Debug the RAM configuration using PEMicro debuggers
     \b sema42_multicore_mpc5748g_z2_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers
     \b sema42_multicore_mpc5748g \b LaunchGroup_RAM \b PEMicro | Debug the RAM configuration using PEMicro debuggers
     \b sema42_multicore_mpc5748g \b LaunchGroup_FLASH \b PEMicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration from one of the two existing LaunchGroups and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.

    ## Notes ##
    ______

    This example runs on target both Flash and Ram configuration.
*/
