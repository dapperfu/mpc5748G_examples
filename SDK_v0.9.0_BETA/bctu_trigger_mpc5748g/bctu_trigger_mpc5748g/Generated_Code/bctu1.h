/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : bctu1.h
**     Project     : bctu_trigger_mpc5748g
**     Processor   : MPC5748G_176
**     Component   : bctu
**     Version     : Component S32_SDK_C55, Driver 01.00, CPU db: 3.00.000
**     Repository  : SDK_MPC574x_04
**     Compiler    : GNU C Compiler
**     Date/Time   : 2018-04-30, 18:38, # CodeGen: 0
**     Contents    :
**         BCTU_DRV_Config               - void BCTU_DRV_Config(const uint32_t instance,const bctu_config_t *const config);
**         BCTU_DRV_GetDefaultConfig     - void BCTU_DRV_GetDefaultConfig(bctu_config_t *const config);
**         BCTU_DRV_Reset                - status_t BCTU_DRV_Reset(const uint32_t instance,const uint32_t timeout);
**         BCTU_DRV_WriteGlobalTriggerEn - void BCTU_DRV_WriteGlobalTriggerEn(const uint32_t instance,const bool state);
**         BCTU_DRV_SetLowPowerMode      - void BCTU_DRV_SetLowPowerMode(const uint32_t instance,const bool state);
**         BCTU_DRV_GetStatusFlag        - bool BCTU_DRV_GetStatusFlag(const uint32_t instance,const uint8_t...
**         BCTU_DRV_ClearStatusFlag      - void BCTU_DRV_ClearStatusFlag(const uint32_t instance,const uint8_t...
**         BCTU_DRV_ClearAllStatusFlags  - void BCTU_DRV_ClearAllStatusFlags(const uint32_t instance,const uint8_t adcIdx);
**         BCTU_DRV_ResetTrigger         - status_t BCTU_DRV_ResetTrigger(const uint32_t instance,const uint8_t...
**         BCTU_DRV_ConfigTriggerSingle  - status_t BCTU_DRV_ConfigTriggerSingle(const uint32_t instance,const uint8_t...
**         BCTU_DRV_IsConvRunning        - bool BCTU_DRV_IsConvRunning(const uint32_t instance,const uint8_t trigIdx);
**         BCTU_DRV_EnableHwTrigger      - void BCTU_DRV_EnableHwTrigger(const uint32_t instance,const uint8_t trigIdx);
**         BCTU_DRV_DisableHwTrigger     - void BCTU_DRV_DisableHwTrigger(const uint32_t instance,const uint8_t trigIdx);
**         BCTU_DRV_StopLoopConversions  - void BCTU_DRV_StopLoopConversions(const uint32_t instance,const uint8_t...
**         BCTU_DRV_ConfigTriggerList    - status_t BCTU_DRV_ConfigTriggerList(const uint32_t instance,const uint8_t...
**         BCTU_DRV_SetConvListArray     - void BCTU_DRV_SetConvListArray(const uint32_t instance,const uint8_t...
**         BCTU_DRV_SwTriggerConv        - void BCTU_DRV_SwTriggerConv(const uint32_t instance,const uint8_t trigIdx);
**         BCTU_DRV_DisableWriteProtect  - void BCTU_DRV_DisableWriteProtect(const uint32_t instance,const...
**         BCTU_DRV_GetConvData          - uint16_t BCTU_DRV_GetConvData(const uint32_t instance,const uint8_t adcIdx);
**         BCTU_DRV_GetConvResult        - void BCTU_DRV_GetConvResult(const uint32_t instance,const uint8_t...
**
**     Copyright 1997 - 2015 Freescale Semiconductor, Inc.
**     Copyright 2016-2017 NXP
**     All Rights Reserved.
**     
**     THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
**     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
**     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
**     IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
**     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
**     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
**     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
**     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
**     IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
**     THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file bctu1.h
** @version 01.00
*/
/*!
**  @addtogroup bctu1_module bctu1 module documentation
**  @{
*/
#ifndef bctu1_H
#define bctu1_H

/* MODULE bctu1. */

/**
 * @page misra_violations MISRA-C:2012 violations
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.5, global macro not referenced
 * There are global macros defined to be used by the integrator and another one used as include guard.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 8.7, External could be made static.
 * Function is defined for usage by application code.
 */

/* Include inherited beans */
#include "Cpu.h"
#include "bctu_driver.h"

/*! @brief Device instance number */
#define INST_BCTU1 0U

/*! @brief bctu_config_t declaration */
extern const bctu_config_t bctu1_globalConfig0;

/*! @brief bctu_trig_config_t declaration */
extern const bctu_trig_config_t bctu1_trigConfig0;
extern const bctu_trig_config_t bctu1_trigConfig1;

#endif
/* ifndef bctu1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.1 [05.21]
**     for the NXP C55 series of microcontrollers.
**
** ###################################################################
*/
