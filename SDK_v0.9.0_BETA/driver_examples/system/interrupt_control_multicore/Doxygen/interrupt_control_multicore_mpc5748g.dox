/*!
    @page interrupt_control_multicore_mpc5748g_group Interrupt control multicore MPC5748G
    @brief Example application showing the usage of the Interrupts with multicore

    ## Application description ##
    ______
    The purpose of this demo application is to show you how to
    use the interrupt manager in a multi-core application. \n
    The application demonstrates installing and handling interrupt
    routines, and enabling, setting priority and triggering an
    interrupt routine on a different core.

    The example does the following operations.
    - Firstly, all cores are started
    - The LEDs are configured as output by each core.
    - On core Z4_0:
       - the Pins used by all cores are configured.
       - the PIT is configured and Channel_0 is set to generate an interrupt once half a second, toggling LED1.
    - On core Z4_1:
       - the PIT Channel_1 is set to generate an interrupt once a second, toggling LED3, and generating a software interrupt on core Z2 every 5 Channel_1 interrupts.
       - the software interrupt 1 is configured for the core Z2.
    - On core Z2:
       - the software interrupt that toggles LED5 is installed.
       - the PIT Channel_2 is set to generate an interrupt once half a second, toggling LED7.

    @note Before setting up any interrupts, disable it on all cores. This needs to be done because
    by default all Priority Select Registers are set to send the interrupts to core Z4_0.

    LEDS                    | Controlling core
    ------------------------|:----------------:
    LED1 (\b DS4) (\b PA10) | Z4_0
    LED3 (\b DS6) (\b PH13) | Z4_1
    LED5 (\b DS8) (\b PH5)  | Z2
    LED7 (\b DS10) (\b PA0) | Z2



    ## Prerequisites ##
    ______
    To run the example, you will need to have the following items:
    - 1 MPC5748G board
    - 1 Power Adapter 12V (if the board cannot be powered from the USB port)
    - 1 Personal Computer
    - 1 PEMicro Debugger (optional, users can use Open SDA)

    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - DEVKIT - MPC5748G

    ## Hardware Wiring ##
    ______
    No connections are required for this example.

    ## How to run ##
    ______

    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select all three projects \b interrupt_control_multicore_mpc5748g_<coreId>. Then click on \b Finish. \n
    The projects should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select one by one each of the projects(\b interrupt_control_multicore_mpc5748g_<coreId>). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select each project and then the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. \n
    Select from the two existing LaunchGroups the desired debug configuration \b FLASH (LaunchGroup_FLASH) or \b RAM (LaunchGroup_RAM) and click on \b Debug. \n
    Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow. \n

    @note <b>Please note that the program for core Z2 has to be started at the same time or before core Z4_1.</b>\n
    This is required because core Z4_1 triggers a software interrupt on Z2 and if core Z2
    does not have enough time to set it up, it will result in an unknown behaviour for core Z2.

    \n There are eight debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b interrupt_control_multicore_mpc5748g_z4_0 \b Debug_RAM    | Debug only the core Z4_0 RAM configuration using PEMicro debuggers
     \b interrupt_control_multicore_mpc5748g_z4_0 \b Debug_FLASH  | Debug only the core Z4_0 FLASH configuration using PEMicro debuggers
     \b interrupt_control_multicore_mpc5748g_z4_1 \b Debug_RAM    | Debug only the core Z4_1 RAM configuration using PEMicro debuggers
     \b interrupt_control_multicore_mpc5748g_z4_1 \b Debug_FLASH  | Debug only the core Z4_1 FLASH configuration using PEMicro debuggers
     \b interrupt_control_multicore_mpc5748g_z2 \b Debug_RAM      | Debug only the core Z2 RAM configuration using PEMicro debuggers
     \b interrupt_control_multicore_mpc5748g_z2 \b Debug_FLASH    | Debug only the core Z2 FLASH configuration using PEMicro debuggers
     \b interrupt_control_multicore_mpc5748g \b LaunchGroup_RAM   | Debug the RAM configuration using PEMicro debuggers
     \b interrupt_control_multicore_mpc5748g \b LaunchGroup_FLASH | Debug the FLASH configuration using PEMicro debuggers

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.

    ## Notes ##
    ______

    This example runs on both FLASH and RAM configuration.
*/
