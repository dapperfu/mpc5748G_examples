/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : i2c1.h
**     Project     : i2c_transfer_mpc5748g
**     Processor   : MPC5748G_176
**     Component   : i2c
**     Version     : Component SDK_MPC574x_04, Driver 01.00, CPU db: 3.00.000
**     Repository  : SDK_MPC574x_04
**     Compiler    : GNU C Compiler
**     Date/Time   : 2018-05-01, 00:44, # CodeGen: 0
**     Contents    :
**         I2C_DRV_MasterInit                - status_t I2C_DRV_MasterInit(uint32_t instance,const i2c_master_user_config_t...
**         I2C_DRV_MasterDeinit              - status_t I2C_DRV_MasterDeinit(uint32_t instance);
**         I2C_DRV_MasterSendData            - status_t I2C_DRV_MasterSendData(uint32_t instance,const uint8_t *...
**         I2C_DRV_MasterSendDataBlocking    - status_t I2C_DRV_MasterSendDataBlocking(uint32_t instance,const uint8_t *...
**         I2C_DRV_MasterAbortTransferData   - status_t I2C_DRV_MasterAbortTransferData(uint32_t instance);
**         I2C_DRV_MasterReceiveData         - status_t I2C_DRV_MasterReceiveData(uint32_t instance,uint8_t *...
**         I2C_DRV_MasterReceiveDataBlocking - status_t I2C_DRV_MasterReceiveDataBlocking(uint32_t instance,uint8_t *...
**         I2C_DRV_MasterGetTransferStatus   - status_t I2C_DRV_MasterGetTransferStatus(uint32_t instance,uint32_t *...
**         I2C_DRV_MasterSetBaudRate         - status_t I2C_DRV_MasterSetBaudRate(uint32_t instance,uint32_t baudRate);
**         I2C_DRV_MasterGetBaudRate         - uint32_t I2C_DRV_MasterGetBaudRate(uint32_t instance);
**         I2C_DRV_SlaveInit                 - status_t I2C_DRV_SlaveInit(uint32_t instance,const i2c_slave_user_config_t *...
**         I2C_DRV_SlaveDeinit               - status_t I2C_DRV_SlaveDeinit(uint32_t instance);
**         I2C_DRV_SlaveSetTxBuffer          - status_t I2C_DRV_SlaveSetTxBuffer(uint32_t instance,const uint8_t *...
**         I2C_DRV_SlaveSetRxBuffer          - status_t I2C_DRV_SlaveSetRxBuffer(uint32_t instance,uint8_t * rxBuff,uint32_t...
**         I2C_DRV_SlaveSendData             - status_t I2C_DRV_SlaveSendData(uint32_t instance,const uint8_t *...
**         I2C_DRV_SlaveSendDataBlocking     - status_t I2C_DRV_SlaveSendDataBlocking(uint32_t instance,const uint8_t *...
**         I2C_DRV_SlaveReceiveData          - status_t I2C_DRV_SlaveReceiveData(uint32_t instance,uint8_t * rxBuff,uint32_t...
**         I2C_DRV_SlaveReceiveDataBlocking  - status_t I2C_DRV_SlaveReceiveDataBlocking(uint32_t instance,uint8_t *...
**         I2C_DRV_SlaveGetTransferStatus    - status_t I2C_DRV_SlaveGetTransferStatus(uint32_t instance,uint32_t *...
**         I2C_DRV_SlaveAbortTransferData    - status_t I2C_DRV_SlaveAbortTransferData(uint32_t instance);
**
**     Copyright 1997 - 2015 Freescale Semiconductor, Inc.
**     Copyright 2016-2017 NXP
**     All Rights Reserved.
**     
**     THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
**     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
**     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
**     IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
**     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
**     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
**     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
**     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
**     IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
**     THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file i2c1.h
** @version 01.00
*/
/*!
**  @addtogroup i2c1_module i2c1 module documentation
**  @{
*/
#ifndef i2c1_H
#define i2c1_H
/* MODULE i2c1. */

/* Include inherited beans */
#include "clockMan1.h"
#include "dmaController1.h"
#include "i2c_driver.h"

/*!
 * @page misra_violations MISRA-C:2012 violations
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.5, Global macro not referenced.
 * The macros were defined for consistency reasons, all the instances have a corresponding number.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 8.4, external symbol defined without a prior
 * declaration.
 * The symbols are declared in the driver header as external; the header is not included
 * by this file.
 */

/*! @brief Device instance number */
#define INST_I2C1 0
#define INST_I2C2 1
#define INST_I2C3 2
#define INST_I2C4 3

/*! @brief Master configuration declaration */
extern const i2c_master_user_config_t i2c1_MasterConfig0;

/*! @brief Slave configuration declaration */
extern i2c_slave_user_config_t i2c1_SlaveConfig0;

/*! @brief Slave callback external declaration */
extern void i2c1_SlaveCallback0(i2c_slave_event_t slaveEvent,void *userData);



#endif
/* ifndef __i2c1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.1 [05.21]
**     for the NXP C55 series of microcontrollers.
**
** ###################################################################
*/
