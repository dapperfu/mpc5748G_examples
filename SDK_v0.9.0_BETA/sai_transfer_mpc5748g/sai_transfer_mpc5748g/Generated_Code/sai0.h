/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : sai0.h
**     Project     : sai_transfer_mpc5748g
**     Processor   : MPC5748G_256
**     Component   : sai
**     Version     : Component SDK_MPC574x_04, Driver 01.00, CPU db: 3.00.000
**     Repository  : SDK_MPC574x_04
**     Compiler    : GNU C Compiler
**     Date/Time   : 2018-05-01, 01:20, # CodeGen: 0
**     Abstract    :
**
**     Contents    :
**         SAI_DRV_FCDInit            - void SAI_DRV_FCDInit(uint32_t instNum, sai_fcd_clock_source_t fcdSource,...
**         SAI_DRV_GetFCDFreq         - void SAI_DRV_GetFCDFreq(uint32_t instNum, uint32_t* freq);
**         SAI_DRV_TxInit             - void SAI_DRV_TxInit(uint32_t instNum,const sai_user_config_t*...
**         SAI_DRV_RxInit             - void SAI_DRV_RxInit(uint32_t instNum,const sai_user_config_t*...
**         SAI_DRV_TxDeinit           - void SAI_DRV_TxDeinit(uint32_t instNum);
**         SAI_DRV_RxDeinit           - void SAI_DRV_RxDeinit(uint32_t instNum);
**         SAI_DRV_TxGetBitClockFreq  - uint32_t SAI_DRV_TxGetBitClockFreq(uint32_t instNum);
**         SAI_DRV_RxGetBitClockFreq  - uint32_t SAI_DRV_RxGetBitClockFreq(uint32_t instNum);
**         SAI_DRV_TxGetBitClockDiv   - uint32_t SAI_DRV_TxGetBitClockDiv(uint32_t instNum);
**         SAI_DRV_RxGetBitClockDiv   - uint32_t SAI_DRV_RxGetBitClockDiv(uint32_t instNum);
**         SAI_DRV_TxSetNextMaskWords - void SAI_DRV_TxSetNextMaskWords(uint32_t instNum,uint16_t Words);
**         SAI_DRV_RxSetNextMaskWords - void SAI_DRV_RxSetNextMaskWords(uint32_t instNum,uint16_t Words);
**         SAI_DRV_SendBlocking       - status_t SAI_DRV_SendBlocking(uint32_t instNum,const uint8_t* data[],uint32_t...
**         SAI_DRV_Send               - void SAI_DRV_Send(uint32_t instNum,const uint8_t* data[],uint32_t count);
**         SAI_DRV_GetSendingStatus   - status_t SAI_DRV_GetSendingStatus(uint32_t instNum,uint32_t *countRemain);
**         SAI_DRV_AbortSending       - void SAI_DRV_AbortSending(uint32_t instNum);
**         SAI_DRV_ReceiveBlocking    - status_t SAI_DRV_ReceiveBlocking(uint32_t instNum,uint8_t* data[],uint32_t...
**         SAI_DRV_Receive            - void SAI_DRV_Receive(uint32_t instNum,uint8_t* data[],uint32_t count);
**         SAI_DRV_GetReceivingStatus - status_t SAI_DRV_GetReceivingStatus(uint32_t instNum,uint32_t *countRemain);
**         SAI_DRV_AbortReceiving     - void SAI_DRV_AbortReceiving(uint32_t instNum);
**         SAI_DRV_GetDefaultConfig   - void SAI_DRV_GetDefaultConfig(sai_user_config_t* uc);
**         SAI_DRV_SetMaster          - void SAI_DRV_SetMaster(uint32_t instNum,bool tx);
**
**     Copyright 1997 - 2015 Freescale Semiconductor, Inc.
**     Copyright 2016-2017 NXP
**     All Rights Reserved.
**     
**     THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
**     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
**     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
**     IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
**     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
**     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
**     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
**     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
**     IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
**     THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file sai0.h
** @version 01.00
** @brief
**
*/
/*!
**  @addtogroup sai0_module sai0 module documentation
**  @{
*/

/* MODULE sai0
 *
 * @page misra_violations MISRA-C:2012 violations
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.5, Global macro not referenced.
 * The macros are defined to be used by application code.
 */

#ifndef sai0_H
#define sai0_H

/* Include inherited beans */
#include "clockMan1.h"
#include "dmaController1.h"
#include "Cpu.h"

/*! @brief Device instance number */
#define INST_SAI0 (0U)

/*! Driver state structure */
extern sai_state_t sai0TxState;
/*! User configuration structure */
extern sai_user_config_t sai0_InitConfig0;
#endif  /* ifndef sai0_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.1 [05.21]
**     for the NXP C55 series of microcontrollers.
**
** ###################################################################
*/
