=============================================================================
List of generated methods in project: sdhc_fatfs_mpc5748g

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_SetSoftwareIRQRequest -Set software interrupt request.
   - intMan1_INT_SYS_ClearSoftwareIRQRequest -Clear software interrupt request.
   - intMan1_INT_SYS_EnableIRQ_MC -Enables an interrupt for a given IRQ number, on the given cores.
   - intMan1_INT_SYS_GetCoresForIRQ -Gets the cores on which an interrupt for the specified IRQ number is enabled.
   - intMan1_INT_SYS_DisableIRQ_MC -Disables an interrupt for a given IRQ number, on the given cores.
   - intMan1_INT_SYS_DisableIRQ_MC_All -Disables an interrupt for a given IRQ number, on all cores.

Module "rtcTimer1" (component rtc_c55)
   - rtcTimer1_RTC_DRV_Init -Initialize RTC driver This function initializes the RTC driver based on the configuration given by 
                user.
   - rtcTimer1_RTC_DRV_Deinit -Deinitializes RTC driver This function will stop the RTC counter and will disable the interrupts.
   - rtcTimer1_RTC_DRV_GetDefaultConfig -Gets the default configuration for the RTC This function will save the default RTC 
                configuration in the structure passed by the user.
   - rtcTimer1_RTC_DRV_StartCounter -Start the RTC counter This function will start the counter if it was disabled. It will 
                return STATUS_ERROR if the counter was already enabled. Otherwise it will return STATUS_SUCCESS.
   - rtcTimer1_RTC_DRV_StopCounter -Stop the RTC counter This function will stop the counter if it was enabled. It will return 
                STATUS_ERROR if the counter is already disabled. Otherwise it will return STATUS_SUCCESS.
   - rtcTimer1_RTC_DRV_SetTimeDate -Set the time and date This function will set the date passed by the user. It will return 
                STATUS_ERROR if the time and date are invalid. Otherwise it will return STATUS_SUCCESS.
   - rtcTimer1_RTC_DRV_GetTimeDate -Get the time and date This function will get the current time and date and it will store in 
                the structure passed by the user.
   - rtcTimer1_RTC_DRV_UpdateModuleFrequency -Update internal state frequency from the one in hardware This function will 
                update the ticks number that are passed in a second based on the frequency retrieved from Clock Manager and 
                module configuration. This function needs to be called when the system clocks or power mode are changed. After 
                calling this function both alarm and periodic interrupts need to be reconfigured.
   - rtcTimer1_RTC_DRV_GetInterruptFlag -Get interrupt flag This function will get the passed flag status.
   - rtcTimer1_RTC_DRV_ClearInterruptFlag -Clear interrupt flag This function will clear the selected interrupt flag.
   - rtcTimer1_RTC_DRV_GetStatusFlag -Get status flag This function will get the passed flag status.
   - rtcTimer1_RTC_DRV_ConfigureAlarm -Configure the alarm This function will configure the alarm based on the configuration 
                structure passed by the user. It will return STATUS_ERROR if the alarm time configured is invalid, if the time 
                and date are not in future or if the register was not synchronized. Otherwise it will return STATUS_SUCCESS.
   - rtcTimer1_RTC_DRV_ConfigurePeriodicInterrupt -Configure the periodic interrupt This function will configure a periodic 
                interrupt(using the RTC's API functionality) with the period configured by the user. It will calculate the 
                necessary compare value using periodInMs parameter and the clock source of the module. If the calculated value 
                is computed correctly it will return STATUS_SUCCESS, otherwise it will return STATUS_ERROR and the 
                functionality will not be enabled.
   - rtcTimer1_RTC_DRV_ConfigureComparatorTrigger -Configure the analog comparator trigger period This function will configure 
                the analog comparator trigger period with the period configured by the user. It will calculate the necessary 
                compare value using periodInMs parameter and the clock source of the module. If the calculated value is 
                computed correctly it will return STATUS_SUCCESS, otherwise it will return STATUS_ERROR and the functionality 
                will not be enabled.
   - rtcTimer1_RTC_DRV_ConvertSecondsToTimeDate -Convert seconds to rtc_timedate_t structure.
   - rtcTimer1_RTC_DRV_ConvertTimeDateToSeconds -Convert rtc_timedate_t structure to seconds.
   - rtcTimer1_RTC_DRV_IsYearLeap -Check if the current year is leap.
   - rtcTimer1_RTC_DRV_IsTimeDateCorrectFormat -Check if the date time struct is configured properly.
   - rtcTimer1_RTC_DRV_IRQHandler -This method is the API's Interrupt handler for generic and alarm IRQ. It will handle the 
                alarm processing and calls the user callback if they are not NULL.
   - rtcTimer1_RTC_DRV_IsSyncRTCVAL -Check if the timer is synchronized.

Module "usdhc1"    (component usdhc)
   - usdhc1_uSDHC_DRV_GetDefaultConfig -Gets the default configuration structure.
   - usdhc1_uSDHC_DRV_Init -Initializes a uSDHC module.
   - usdhc1_uSDHC_DRV_Deinit -Shuts down the uSDHC module.
   - usdhc1_uSDHC_DRV_Reset -Reset the uSDHC module.
   - usdhc1_uSDHC_DRV_InstallCallback -Register the callback function.
   - usdhc1_uSDHC_DRV_GetCapability -Get supported capability of uSDHC module.
   - usdhc1_uSDHC_DRV_SetBusClock -Set frequency for the CLK pin. The read/write speed will depend on this frequency.
   - usdhc1_uSDHC_DRV_SetCardActive -Send 80 clock cycles to the card to activate the card.
   - usdhc1_uSDHC_DRV_SetDataBusWidth -Set data bus width for uSDHC module.
   - usdhc1_uSDHC_DRV_TransferBlocking -Transfer command/data using blocking mode.
   - usdhc1_uSDHC_DRV_Transfer -Transfer command/data using non-blocking mode.
   - usdhc1_uSDHC_DRV_EnableCardControl -Enable or disable some features for uSDHC.
   - usdhc1_uSDHC_DRV_GetPresentStatusFlags -This function is used to get the status of uSDHC.

Module "sdhc_middleware1" (component sdhc)
   - sdhc_middleware1_uSDHC_fatfs_initialize -uSDHC fatfs callbacks initialization routine. Must be called before FATFS use.

Module "fatfs_middleware1" (component fatfs)
   - fatfs_middleware1_f_open -Open or create a file.
   - fatfs_middleware1_f_close -Close an open file object.
   - fatfs_middleware1_f_read -Read data from the file.
   - fatfs_middleware1_f_write -Write data to the file.
   - fatfs_middleware1_f_lseek -Move file pointer of the file object.
   - fatfs_middleware1_f_truncate -Truncate the file.
   - fatfs_middleware1_f_sync -Flush cached data of the writing file.
   - fatfs_middleware1_f_opendir -Open a directory.
   - fatfs_middleware1_f_closedir -Close a directory.
   - fatfs_middleware1_f_readdir -Read Directory Entries in Sequence.
   - fatfs_middleware1_f_findfirst -Find first file.
   - fatfs_middleware1_f_findnext -Find next file.
   - fatfs_middleware1_f_mkdir -Create new directory.
   - fatfs_middleware1_f_unlink -Delete an existing file or directory.
   - fatfs_middleware1_f_rename -Move/rename existing file or directory.
   - fatfs_middleware1_f_stat -Get file status.
   - fatfs_middleware1_f_chmod -Change attribute of a file/dir.
   - fatfs_middleware1_f_utime -Change timestamp of a file/dir.
   - fatfs_middleware1_f_chdir -Change current directory.
   - fatfs_middleware1_f_chdrive -Change current drive.
   - fatfs_middleware1_f_getcwd -Get current directory.
   - fatfs_middleware1_f_getfree -Get number of free clusters on the drive.
   - fatfs_middleware1_f_getlabel -Get volume label.
   - fatfs_middleware1_f_setlabel -Set volume label.
   - fatfs_middleware1_f_forward -Forward data to the stream.
   - fatfs_middleware1_f_expand -Allocate a contiguous block to the file.
   - fatfs_middleware1_f_mount -Mount/Unmount a logical drive.
   - fatfs_middleware1_f_mkfs -Create a FAT volume.
   - fatfs_middleware1_f_fdisk -Divide a physical drive into some partitions.
   - fatfs_middleware1_f_putc -Put a character to the file.
   - fatfs_middleware1_f_puts -Put a string to the file.
   - fatfs_middleware1_f_printf -Put a formatted string to the file.
   - fatfs_middleware1_f_gets -Get a string from the file.

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This function configures the pins with the options provided in the provided structure
   - pin_mux_PINS_DRV_SetPullSel -This function configures the internal resistor
   - pin_mux_PINS_DRV_SetOutputBuffer -This function configures the output buffer
   - pin_mux_PINS_DRV_SetInputBuffer -This function configures the input buffer
   - pin_mux_PINS_DRV_ConfigIntFilterClock -This function configures the interrupt filter clock prescaler
   - pin_mux_PINS_DRV_SetExInt -This function configures the external interrupt
   - pin_mux_PINS_DRV_ClearPinExIntFlag -This function clears the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_GetPinExIntFlag -This function gets the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_ClearExIntFlag -This function clears the entire external interrupt status flag
   - pin_mux_PINS_DRV_GetExIntFlag -This function gets the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_WritePin -This function writes the given pin from a port, with the given value ('0' represents LOW, '1' 
                represents HIGH)
   - pin_mux_PINS_DRV_WritePins -This function writes all pins configured as output with the values given in the parameter pins.
                '0' represents LOW, '1' represents HIGH
   - pin_mux_PINS_DRV_GetPinsOutput -This function returns the current output that is written to a port. Only pins that are 
                configured as output will have meaningful values
   - pin_mux_PINS_DRV_SetPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                value of 'set' (HIGH). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ClearPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                'cleared' value (LOW). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_TogglePins -This function toggles output pins listed in parameter pins (bits that are '1'). Pins 
                corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ReadPins -This function returns the current input values from a port. Only pins configured as input will 
                have meaningful values

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_SYS_Init -Install pre-defined clock configurations.
   - clockMan1_CLOCK_SYS_UpdateConfiguration -Set system clock configuration according to pre-defined structure.
   - clockMan1_CLOCK_SYS_SetConfiguration -Set system clock configuration.
   - clockMan1_CLOCK_SYS_GetCurrentConfiguration -Get current system clock configuration.
   - clockMan1_CLOCK_SYS_GetErrorCallback -Get the callback which returns error in last clock switch.
   - clockMan1_CLOCK_SYS_GetFreq -Gets the clock frequency for a specific clock name.

Module "Cpu"       (component MPC5748G_176)
   - Cpu_SystemInit -This method configures the oscillator (PLL) that is part of the microcontroller device. SystemInit is 
                called from startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock.
   - Cpu_SystemSoftwareReset -This method initiates a software rest of the microcontroller.

===================================================================================
