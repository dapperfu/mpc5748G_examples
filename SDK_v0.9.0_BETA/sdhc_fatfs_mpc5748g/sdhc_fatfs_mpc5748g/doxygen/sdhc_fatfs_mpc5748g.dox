/*!
    @page sdhc_fatfs_mpc5748g_group Sample App SDHC MPC5748G
    @brief Basic application that uses SDHC from S32 SDK in order to access SD card


    ## Application description ##
    _____
    The purpose of this demo is to provide the user with an out-of-the box
    example application for MPC57xx platform, using S32 SDK.
    Application uses FATFS over SDHC stack. Usage workflow is the following: format SD card on Windows PC,
    insert SD card into SDHC slot on Calypso 6M, run the app, insert SD card back to Windows PC,
    access created files.

    ## Prerequisites ##
    ______
    The run the example you will need to have the following items:
    - 1 MPC574xG-MB
    - 1 SD(or SDHC) card
    - 1 Power Adapter 12V (if the board cannot be powered from the USB port)
    - 1 Personal Computer
    - 1 PE Micro, 1 USB Type B cable or 1 T32 Power View, 1 Power Adapter 7.5V, 1 USB Type B cable, 1 T32 debug interface, 1 T32 debug cable for MPC5500

    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - MPC574xG-MB
	- Devkit - MPC5748G with SDHC Devkit attached

	## Serial monitor configuration ##
	______
    - baudRate = 115200
    - parityCheck = false
    - parityType = LINFLEXD_UART_PARITY_EVEN
    - stopBitsCount = LINFLEXD_UART_ONE_STOP_BIT
    - wordLength = LINFLEXD_UART_8_BITS

	## Enable/disable Write protected mode
	______
	Some devices only have an uSD card slot. So there isn't the possibility
	to protect these cards from writing for the user. This issue is resolved by a Write protect check-box that
	can be set or not how the user wants.

    ## Hardware Wiring ##
    ______
    The following connections must be done to for this example application to work:

    ## How to run ##
    ______

    #### 1. Importing the project into the workspace ####
    Go to \b File -> \b New \b S32DS \b Project \b From... and select \b sdhc_fatfs_mpc5748g.
    Check \b Copy Projects into workspace \b. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b sdhc_fatfs_mpc5748g).
    Choose usdhc1:usdhc pex component from Components.
    Check if the Write protect check-box isn't set default and we have the following warninig message:
    "Write protect has been disabled." We also have to see the same message if we select the Problems tab.
    This message must disappear if we set the Write protect check-box.

    Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be four debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b sdhc_fatfs_mpc5748g \b Debug_RAM \b PEMicro | Debug the RAM configuration using PEMicro debuggers
     \b sdhc_fatfs_mpc5748g \b Debug_FLASH \b PEMicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.
    #### 5. Expected results after running the tests:
		- 202 binary files as follows: newFile[0-199].bin, newFile0copy.bin and newFile1copy.bin. All files have a size of 21 bytes except for files newFile1.bin newFile1copy.bin which have 2,751KB.
    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.
*/
