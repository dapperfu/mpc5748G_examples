/*!
    @page smpu_protection_mpc5748g_group SMPU protection MPC7548G
    @brief Example application showing the usage of the SMPU module

    ## Application description ##
    ______
    The purpose of this demo application is to show you
    how to use the System Memory Protection Unit of the MPC57xx
    MCU with this SDK.

    The examples use SMPU to protect 32 bytes in flash memory.

     Region | Core Z4A |  Core Z2  |  ...  |   Address
    --------|----------|-----------|-------|------------------------
       0    |  rw      |   rw      |  rw   |0x00000000 - 0x011387FF
       1    |  -w      |   rw      |  rw   |0x01138800 - 0x0113881F
       2    |  r-      |   rw      |  rw   |0x01138800 - 0x0113881F
       3    |  rw      |   rw      |  rw   |0x01138820 - 0xFFFFFFFF

    Run the example
        1. After reset, SMPU will be initialized according to configuration above.
        2. Read flash memory at address 0x01138804 is permitted.
        3. Press button (SW) on the board to ignore read permission by disabling region 2.
        4. Read flash memory at address 0x01138804 is violated.
        5. SMPU report the detail of error access on master Core Z4A.

    Verification
        1. LED1 on indicate that SMPU initialization successful.
        2. LED2 on (LED1 off) indicate that there is violated read access reported by SMPU.

     ## Prerequisites ##
    ______
    The run the example you will need to have the following items:
    - 1 MPC5748G board
    - 1 Power Adapter 12V (if the board cannot be powered from the USB port)
    - 1 Personal Computer
    - 1 PEMicro Debugger (optional, users can use Open SDA)

    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - MPC574xG-MB
    - DEVKIT - MPC5748G

    ## Hardware Wiring ##
    ______
    The following connections must be done to for this example application to work:

    PIN FUNCTION |   DEVKIT-MPC5748G                      |   MPC574xG-MB
    -------------|----------------------------------------|-------------------------------------
        LED1     | USER_LED1 (DS9) - wired on the board   | USER_LED1 (DS2) - wired on the board
        LED2     | USER_LED2 (DS10) - wired on the board  | USER_LED2 (DS3) - wired on the board
        SW       | PA3 (SW4) - wired on the board         | PA2 (SW4)       - wired on the board

    ## How to run ##
    ______

    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b smpu_protection_mpc5748g. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b smpu_protection_mpc5748g). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be two debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b smpu_protection_mpc5748g_debug_ram_pemicro | Debug the RAM configuration using PEMicro debuggers
     \b smpu_protection_mpc5748g_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.
*/
